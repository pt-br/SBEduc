/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;


import java.awt.Color;
import java.sql.Connection;
import java.util.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luks
 */
public class TelaEmprestimoBACKUP extends javax.swing.JDialog {

    TelaPrinc telaP;
    

    
    public TelaEmprestimoBACKUP(TelaPrinc telaP) {
       
      ImageIcon icone = new ImageIcon(getClass().getResource("/Img/icone/icone.png"));
       this.setIconImage(icone.getImage()); 
       
       //te this.setResizable(false);
        initComponents();
        
        //TEXT BOTOES CONFIG
        
        bEfetuarEmprestimo.setVerticalTextPosition(SwingConstants.BOTTOM);
        bEfetuarEmprestimo.setHorizontalTextPosition(SwingConstants.CENTER); 
        
        bVoltar.setVerticalTextPosition(SwingConstants.BOTTOM);
        bVoltar.setHorizontalTextPosition(SwingConstants.CENTER);
        
        
        this.telaP = telaP;
        
        
        this.atualizaTabela();
        this.atualizaTabela2();
        
        this.setLocationRelativeTo(null);
        
        this.setVisible(true);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        bEfetuarEmprestimo = new javax.swing.JButton();
        bVoltar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tPesquisarLivro = new javax.swing.JTextField();
        bPesquisar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tPesquisar = new javax.swing.JTextField();
        bPesquisarLivro = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lSelectAluno = new javax.swing.JLabel();
        lSelectLivro1 = new javax.swing.JLabel();
        tCalendario = new com.toedter.calendar.JCalendar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Efetuar Empréstimo");
        setMinimumSize(new java.awt.Dimension(1024, 768));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 155, 219));

        jLabel1.setBackground(new java.awt.Color(222, 67, 21));
        jLabel1.setFont(new java.awt.Font("Impact", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Efetuar Empréstimo");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(42, 42, 42)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 431, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(33, 33, 33)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(0, 155, 219));

        bEfetuarEmprestimo.setContentAreaFilled(false);
        bEfetuarEmprestimo.setFocusPainted(false);
        bEfetuarEmprestimo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bEfetuarEmprestimo.setForeground(new java.awt.Color(240, 240, 240));
        bEfetuarEmprestimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/botoes/efetuarEmpréstimo2.png"))); // NOI18N
        bEfetuarEmprestimo.setText("<html><center>Efetuar<br>Empréstimo");
        bEfetuarEmprestimo.setBorderPainted(false);
        bEfetuarEmprestimo.setContentAreaFilled(false);
        bEfetuarEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bEfetuarEmprestimoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bEfetuarEmprestimoMouseExited(evt);
            }
        });
        bEfetuarEmprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEfetuarEmprestimoActionPerformed(evt);
            }
        });

        bVoltar.setContentAreaFilled(false);
        bVoltar.setFocusPainted(false);
        bVoltar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bVoltar.setForeground(new java.awt.Color(240, 240, 240));
        bVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/botoes/voltar.png"))); // NOI18N
        bVoltar.setText("<html><center>Voltar");
        bVoltar.setBorderPainted(false);
        bVoltar.setContentAreaFilled(false);
        bVoltar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bVoltarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bVoltarMouseExited(evt);
            }
        });
        bVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVoltarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(bEfetuarEmprestimo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, Short.MAX_VALUE)
            .add(bVoltar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(41, 41, 41)
                .add(bEfetuarEmprestimo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(bVoltar)
                .add(39, 39, 39))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Título do Livro");

        tPesquisarLivro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tPesquisarLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tPesquisarLivroActionPerformed(evt);
            }
        });
        tPesquisarLivro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tPesquisarLivroKeyReleased(evt);
            }
        });

        bPesquisar.setContentAreaFilled(false);
        bPesquisar.setFocusPainted(false);
        bPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/botoes/pesquisar.png"))); // NOI18N
        bPesquisar.setBorderPainted(false);
        bPesquisar.setContentAreaFilled(false);
        bPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPesquisarActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Nome do Leitor");

        tPesquisar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tPesquisarActionPerformed(evt);
            }
        });
        tPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tPesquisarKeyReleased(evt);
            }
        });

        bPesquisarLivro.setContentAreaFilled(false);
        bPesquisarLivro.setFocusPainted(false);
        bPesquisarLivro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/botoes/pesquisar.png"))); // NOI18N
        bPesquisarLivro.setBorderPainted(false);
        bPesquisarLivro.setContentAreaFilled(false);
        bPesquisarLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPesquisarLivroActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Data de Devolução");

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Titulo do Livro", "Autor", "Data Registro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setMinimumSize(new java.awt.Dimension(605, 16));
        jTable2.setPreferredSize(new java.awt.Dimension(605, 16));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setMinWidth(60);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable2.getColumnModel().getColumn(1).setMinWidth(200);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable2.getColumnModel().getColumn(2).setMinWidth(180);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(180);
            jTable2.getColumnModel().getColumn(2).setMaxWidth(180);
            jTable2.getColumnModel().getColumn(3).setMinWidth(100);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome do Leitor", "Turma", "Endereço", "Telefone", "Data Registro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(60);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable1.getColumnModel().getColumn(1).setMinWidth(200);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setMinWidth(70);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(3).setMinWidth(100);
            jTable1.getColumnModel().getColumn(5).setMinWidth(100);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(5).setMaxWidth(100);
        }

        lSelectAluno.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lSelectAluno.setText("Selecione o Leitor desejado:");

        lSelectLivro1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lSelectLivro1.setText("Selecione o Livro desejado:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(tPesquisar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 493, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(492, 492, 492)
                        .add(bPesquisar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(lSelectAluno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 745, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jScrollPane1)
                                .add(62, 62, 62))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(tPesquisarLivro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 511, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(bPesquisarLivro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 57, Short.MAX_VALUE)))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(30, 30, 30)
                                .add(jLabel6))
                            .add(tCalendario, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(lSelectLivro1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane2)
                        .add(292, 292, 292)))
                .add(263, 263, 263))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(55, 55, 55)
                                .add(tPesquisar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(30, 30, 30)
                                .add(bPesquisar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(106, 106, 106)
                                .add(lSelectAluno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(6, 6, 6)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(26, 26, 26)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(tPesquisarLivro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(47, 47, 47)
                                        .add(bPesquisarLivro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(3, 3, 3)
                                .add(tCalendario, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(10, 10, 10)
                        .add(lSelectLivro1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(88, Short.MAX_VALUE))))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
        
      
    
     
    
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
     //   telaP.EfetuarEmprestimoAberto = false;
        
     telaP.setEnabled(true);
    }//GEN-LAST:event_formWindowClosing

    public void atualizaTabela(){
          try {
            Class.forName("com.mysql.jdbc.Driver");
            
            Connection conec;
            
            conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");
            
            String query = "select * from alunos";
            
            PreparedStatement st = conec.prepareStatement(query);

            
            //Até aqui em cima, tudo igual a antes.
            
            //Agora, declarar o ResultSet, que vai pegar o resultado do BD
            
            ResultSet rs = st.executeQuery();
            
            //Agora, mostrar o resultado da pesquisa:
            
            
            
            
            //Mostrar na tabela:
            
            //Cria o modelo padrão da tabela:
            
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            
            model.setNumRows(0);
            
            while(rs.next()){
                
                
                //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                model.addRow(new Object[]{rs.getString("codigo"),rs.getString("nome_aluno"),rs.getString("turma"),rs.getString("endereço"),rs.getString("telefone"),rs.getString("data_cad"),   });
                
               //Mostra no console:
                //Campo (nome) do BD
               
            }
            
            
            
            
            
            
            
            
            
            
        } catch (ClassNotFoundException ex) {
            System.out.println("Não foi possivel encontrar o Driver");
        } catch (SQLException ex) {
            System.out.println("Erro ao conectar com o BD");
        }
    }
    
     public void atualizaTabela2(){
          try {
            Class.forName("com.mysql.jdbc.Driver");
            
            Connection conec;
            
            conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");
            
            String query = "select * from livros ORDER BY titulo_livro ASC";
            
            PreparedStatement st = conec.prepareStatement(query);

            
            //Até aqui em cima, tudo igual a antes.
            
            //Agora, declarar o ResultSet, que vai pegar o resultado do BD
            
            ResultSet rs = st.executeQuery();
            
            
            
            
            //Mostrar na tabela:
            
            //Cria o modelo padrão da tabela:
            
            DefaultTableModel tabela2 = (DefaultTableModel) jTable2.getModel();
            
         //   tabela2.setNumRows(0);
            
            while(rs.next()){
                
                
                //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                tabela2.addRow(new Object[]{rs.getString("codigo_livro"),rs.getString("titulo_livro"),rs.getString("nome_autor"),rs.getString("data_cad")  });
                System.out.println("passou pelo add livro");
               //Mostra no console:
                //Campo (nome) do BD
               
            }
            
            
           
        } catch (ClassNotFoundException ex) {
            System.out.println("Não foi possivel encontrar o Driver");
        } catch (SQLException ex) {
            System.out.println("Erro ao conectar com o BD");
        }
    }
    
    
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
       //   telaP.EfetuarEmprestimoAberto = false;
     telaP.setEnabled(true);
        
    }//GEN-LAST:event_formWindowClosed

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained

    }//GEN-LAST:event_jTable1FocusGained

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        String nome = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1);
        tPesquisar.setText(nome);

    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        String titulo = (String) jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 1);
        tPesquisarLivro.setText(titulo);

    }//GEN-LAST:event_jTable2MouseClicked

    private void bPesquisarLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPesquisarLivroActionPerformed

        if(tPesquisarLivro.getText().equals("")){
            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from livros";

                PreparedStatement st = conec.prepareStatement(query);

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo_livro"),rs.getString("titulo_livro"),rs.getString("nome_autor"),rs.getString("data_cad")  });

                }

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }
            tPesquisarLivro.setText("");
        }

        else{

            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from livros where titulo_livro like ? or num_reg like ? or editora like ? or titulo_livro like ? or nome_autor like ? or data_cad like ?";
            
            PreparedStatement st = conec.prepareStatement(query);
            
            st.setString(1,"%"+tPesquisar.getText()+"%");
            st.setString(2,"%"+tPesquisar.getText()+"%");
            st.setString(3,"%"+tPesquisar.getText()+"%");
            st.setString(4,"%"+tPesquisar.getText()+"%");
            st.setString(5,"%"+tPesquisar.getText()+"%");
            st.setString(6,"%"+tPesquisar.getText()+"%");

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo_livro"),rs.getString("titulo_livro"),rs.getString("nome_autor"),rs.getString("data_cad")  });

                }

                tPesquisarLivro.setText("");

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }

    }//GEN-LAST:event_bPesquisarLivroActionPerformed

    private void tPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tPesquisarActionPerformed

        if(tPesquisar.getText().equals("")){
            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from alunos";

                PreparedStatement st = conec.prepareStatement(query);

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo"),rs.getString("nome_aluno"),rs.getString("turma"),rs.getString("endereço"),rs.getString("telefone"),rs.getString("data_cad"),   });

                }

               

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }
tPesquisar.setText("");
        }

        else{

            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from alunos where nome_aluno like ? or turma like ? or data_cad like ? or endereço like ? or telefone like ? ";
            
            PreparedStatement st = conec.prepareStatement(query);
            
            st.setString(1,"%"+tPesquisar.getText()+"%");
            st.setString(2,"%"+tPesquisar.getText()+"%");
            st.setString(3,"%"+tPesquisar.getText()+"%");
            st.setString(4,"%"+tPesquisar.getText()+"%");
            st.setString(5,"%"+tPesquisar.getText()+"%");

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo"),rs.getString("nome_aluno"),rs.getString("turma"),rs.getString("endereço"),rs.getString("telefone"),rs.getString("data_cad"),   });

                }
tPesquisar.setText("");
               

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }

    }//GEN-LAST:event_tPesquisarActionPerformed

    private void bPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPesquisarActionPerformed

        if(tPesquisar.getText().equals("")){
            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from alunos";

                PreparedStatement st = conec.prepareStatement(query);

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo"),rs.getString("nome_aluno"),rs.getString("turma"),rs.getString("endereço"),rs.getString("telefone"),rs.getString("data_cad"),   });

                }

                tPesquisar.setText("");

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }

        else{

            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from alunos where nome_aluno like ? or turma like ? or data_cad like ? or endereço like ? or telefone like ? ";
            
            PreparedStatement st = conec.prepareStatement(query);
            
            st.setString(1,"%"+tPesquisar.getText()+"%");
            st.setString(2,"%"+tPesquisar.getText()+"%");
            st.setString(3,"%"+tPesquisar.getText()+"%");
            st.setString(4,"%"+tPesquisar.getText()+"%");
            st.setString(5,"%"+tPesquisar.getText()+"%");

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo"),rs.getString("nome_aluno"),rs.getString("turma"),rs.getString("endereço"),rs.getString("telefone"),rs.getString("data_cad"),   });

                }

                tPesquisar.setText("");

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }
    }//GEN-LAST:event_bPesquisarActionPerformed

    private void tPesquisarLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tPesquisarLivroActionPerformed

        if(tPesquisarLivro.getText().equals("")){
            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from livros";

                PreparedStatement st = conec.prepareStatement(query);

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo_livro"),rs.getString("titulo_livro"),rs.getString("nome_autor"),rs.getString("data_cad")  });

                }

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }
            tPesquisarLivro.setText("");
        }

        else{

            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from livros where titulo_livro like ? or num_reg like ? or editora like ? or titulo_livro like ? or nome_autor like ? or data_cad like ?";
            
            PreparedStatement st = conec.prepareStatement(query);
            
            st.setString(1,"%"+tPesquisar.getText()+"%");
            st.setString(2,"%"+tPesquisar.getText()+"%");
            st.setString(3,"%"+tPesquisar.getText()+"%");
            st.setString(4,"%"+tPesquisar.getText()+"%");
            st.setString(5,"%"+tPesquisar.getText()+"%");
            st.setString(6,"%"+tPesquisar.getText()+"%");

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo_livro"),rs.getString("titulo_livro"),rs.getString("nome_autor"),rs.getString("data_cad")  });

                }

                tPesquisarLivro.setText("");

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }
    }//GEN-LAST:event_tPesquisarLivroActionPerformed

    private void bEfetuarEmprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEfetuarEmprestimoActionPerformed

     //   SimpleDateFormat sdfEntrada = new SimpleDateFormat("dd/MM/yyyy");
     //   sdfEntrada.setLenient(false);
        
     //   System.out.println(tCalendario.get); 
        
      

       // try{
           
SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy"); //DEFINE FORMATO DE DATA    
    String datahue = formato.format(tCalendario.getDate()); //CONVERTE PRA STRING    
        System.out.println(datahue);
            
            
            String nome = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1);
            String turma = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 2);
            // String livro = (String) jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 1);
            String livro = tPesquisarLivro.getText();

            if(!livro.equals("")&& !tPesquisar.getText().equals("") ){
                try {
                    Class.forName("com.mysql.jdbc.Driver");

                    //Cria a conection (java.sql) e conecta ao bd

                    Connection conec;

                    conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca", "root" ,"");

                    // A partir daqui, já conectou no BD.

                    //Insere dados no bd:

                    //String query, recebe comandos do SQL
                    String query = "Insert into painel(nome_aluno,turma,livro,data_dev) values(?,?,?,?)";

                    //Cria o comando que envia para o SQL

                    //Seta os valores dos ? nos values da string de inserção
                    PreparedStatement st = conec.prepareStatement(query);
                    st.setString(1, nome);
                    st.setString(2, turma);
                    st.setString(3, livro);
                    st.setString(4, datahue);

                    
                    
                    //executa o comando
                    st.executeUpdate();

                    //Fecha o comando e a execução
                    st.close();
                    conec.close();

                } catch (ClassNotFoundException ex) {
                    System.out.println("Não encontrou a Classe");
                } catch (SQLException ex) {
                    System.out.println("Erro ao conectar no sql");
                }
                // this.setAlwaysOnTop(false);
                JOptionPane.showMessageDialog(null, "Empréstimo efetuado com sucesso!","Efetuar Empréstimo",JOptionPane.INFORMATION_MESSAGE);

                telaP.atualizaTabela();
                this.dispose();
                telaP.toFront();
                telaP.setEnabled(true);
            }

            
            else if(livro.equals("")){
                //       this.setAlwaysOnTop(false);
                JOptionPane.showMessageDialog(null, "Por favor, digite ou selecione o nome de um livro","Livro não especificado",JOptionPane.ERROR_MESSAGE);
                //    this.setAlwaysOnTop(true);
            }
           else if(tPesquisar.getText().equals("")){
                //          this.setAlwaysOnTop(false);
                JOptionPane.showMessageDialog(null, "Por favor, selecione um aluno na lista","Aluno não especificado",JOptionPane.ERROR_MESSAGE);
                //   this.setAlwaysOnTop(true);
            }
          
            if(livro.equals("")|| tPesquisar.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Por favor, preencha todos os campos","Preencha os campos",JOptionPane.ERROR_MESSAGE);
            }

            /*   } catch (ParseException e) {
             * JOptionPane.showMessageDialog(null, "Formato de data inválida.\nPor favor, utilize: dd/mm/aaaa","Data inválida",JOptionPane.ERROR_MESSAGE);
             * }*/

            
            
            
            
            
            
            
            
        /*

        String nome = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1);
        String turma = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 2);
        // String livro = (String) jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 1);
        String livro = tPesquisarLivro.getText();

        if(!livro.equals("")&& !tPesquisar.getText().equals("") && !tDataDev.getText().equals("dd/mm/aaaa") && !tDataDev.getText().equals("") ){
            try {
                Class.forName("com.mysql.jdbc.Driver");

                //Cria a conection (java.sql) e conecta ao bd

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca", "root" ,"");

                // A partir daqui, já conectou no BD.

                //Insere dados no bd:

                //String query, recebe comandos do SQL
                String query = "Insert into painel(nome_aluno,turma,livro,data_dev) values(?,?,?,?)";

                //Cria o comando que envia para o SQL

                //Seta os valores dos ? nos values da string de inserção
                PreparedStatement st = conec.prepareStatement(query);
                st.setString(1, nome);
                st.setString(2, turma);
                st.setString(3, livro);
                st.setString(4, tDataDev.getText());

                //executa o comando
                st.executeUpdate();

                //Fecha o comando e a execução
                st.close();
                conec.close();

            } catch (ClassNotFoundException ex) {
                System.out.println("Não encontrou a Classe");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar no sql");
            }
            // this.setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, "Empréstimo efetuado com sucesso!","Efetuar Empréstimo",JOptionPane.INFORMATION_MESSAGE);

            telaP.atualizaTabela();
            this.dispose();
        }

        else if(tDataDev.getText().equals("dd/mm/aaaa")){
            //  this.setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, "Por favor, especifique a data de devolução","Data de devolução",JOptionPane.ERROR_MESSAGE);
            //   this.setAlwaysOnTop(true);
        }
        if(livro.equals("")){
            //       this.setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, "Por favor, digite ou selecione o nome de um livro","Livro não especificado",JOptionPane.ERROR_MESSAGE);
            //    this.setAlwaysOnTop(true);
        }
        if(tPesquisar.getText().equals("")){
            //          this.setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, "Por favor, selecione um aluno na lista","Aluno não especificado",JOptionPane.ERROR_MESSAGE);
            //   this.setAlwaysOnTop(true);
        }
        if(tDataDev.getText().equals("")){
            //         this.setAlwaysOnTop(false);
            JOptionPane.showMessageDialog(null, "Por favor, especifique a data de devolução","Data de devolução",JOptionPane.ERROR_MESSAGE);
            //      this.setAlwaysOnTop(true);
        }
        if(livro.equals("")|| tPesquisar.getText().equals("") || tDataDev.getText().equals("dd/mm/aaaa") || tDataDev.getText().equals("") ){
            JOptionPane.showMessageDialog(null, "Por favor, preencha todos os campos","Preencha os campos",JOptionPane.ERROR_MESSAGE);
        }
        */
        
    }//GEN-LAST:event_bEfetuarEmprestimoActionPerformed

    private void bEfetuarEmprestimoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bEfetuarEmprestimoMouseExited
        bEfetuarEmprestimo.setForeground(Color.white);
    }//GEN-LAST:event_bEfetuarEmprestimoMouseExited

    private void bEfetuarEmprestimoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bEfetuarEmprestimoMouseEntered
        bEfetuarEmprestimo.setForeground(Color.black);
    }//GEN-LAST:event_bEfetuarEmprestimoMouseEntered

    private void bVoltarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bVoltarMouseEntered
       bVoltar.setForeground(Color.black);
    }//GEN-LAST:event_bVoltarMouseEntered

    private void bVoltarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bVoltarMouseExited
       bVoltar.setForeground(Color.white);
    }//GEN-LAST:event_bVoltarMouseExited

    private void bVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVoltarActionPerformed
         this.dispose();
        telaP.toFront();
        telaP.setEnabled(true);
        
        
        
     
    }//GEN-LAST:event_bVoltarActionPerformed

    private void tPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tPesquisarKeyReleased
      if(tPesquisar.getText().equals("")){
            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from alunos";

                PreparedStatement st = conec.prepareStatement(query);

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo"),rs.getString("nome_aluno"),rs.getString("turma"),rs.getString("endereço"),rs.getString("telefone"),rs.getString("data_cad"),   });

                }

                

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }

        else{

            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from alunos where nome_aluno like ? or turma like ? or data_cad like ? or endereço like ? or telefone like ? ";
            
            PreparedStatement st = conec.prepareStatement(query);
            
            st.setString(1,"%"+tPesquisar.getText()+"%");
            st.setString(2,"%"+tPesquisar.getText()+"%");
            st.setString(3,"%"+tPesquisar.getText()+"%");
            st.setString(4,"%"+tPesquisar.getText()+"%");
            st.setString(5,"%"+tPesquisar.getText()+"%");

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo"),rs.getString("nome_aluno"),rs.getString("turma"),rs.getString("endereço"),rs.getString("telefone"),rs.getString("data_cad"),   });

                }

                

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }
    }//GEN-LAST:event_tPesquisarKeyReleased

    private void tPesquisarLivroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tPesquisarLivroKeyReleased
     
        if(tPesquisarLivro.getText().equals("")){
            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from livros";

                PreparedStatement st = conec.prepareStatement(query);

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo_livro"),rs.getString("titulo_livro"),rs.getString("nome_autor"),rs.getString("data_cad")  });

                }

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }
           
        }

        else{

            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conec;

                conec = DriverManager.getConnection("jdbc:mysql://127.0.0.1/biblioteca","root","");

                String query = "select * from livros where titulo_livro like ? or num_reg like ? or editora like ? or titulo_livro like ? or nome_autor like ? or data_cad like ?";
            
            PreparedStatement st = conec.prepareStatement(query);
            
            st.setString(1,"%"+tPesquisar.getText()+"%");
            st.setString(2,"%"+tPesquisar.getText()+"%");
            st.setString(3,"%"+tPesquisar.getText()+"%");
            st.setString(4,"%"+tPesquisar.getText()+"%");
            st.setString(5,"%"+tPesquisar.getText()+"%");
            st.setString(6,"%"+tPesquisar.getText()+"%");

                //Até aqui em cima, tudo igual a antes.

                //Agora, declarar o ResultSet, que vai pegar o resultado do BD

                ResultSet rs = st.executeQuery();

                //Agora, mostrar o resultado da pesquisa:

                //Mostrar na tabela:

                //Cria o modelo padrão da tabela:

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                model.setNumRows(0);

                while(rs.next()){

                    //Cria o novo vetor delimitando o tamanho e valores por CHAVES { }
                    model.addRow(new Object[]{rs.getString("codigo_livro"),rs.getString("titulo_livro"),rs.getString("nome_autor"),rs.getString("data_cad")  });

                }

               

            } catch (ClassNotFoundException ex) {
                System.out.println("Não foi possivel encontrar o Driver");
            } catch (SQLException ex) {
                System.out.println("Erro ao conectar com o BD");
            }

        }
    }//GEN-LAST:event_tPesquisarLivroKeyReleased

   /* public void reabrirEdit() {                                             
       
       String codigo = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0);
       String nome = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1);
       String turma = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 2);
       String end = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 3);
       String tel = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 4);
       
       TelaEditAluno telaEditAluno = new TelaEditAluno(this,codigo,nome,turma,end,tel);
       
        
    }   */
    
    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEfetuarEmprestimo;
    private javax.swing.JButton bPesquisar;
    private javax.swing.JButton bPesquisarLivro;
    private javax.swing.JButton bVoltar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lSelectAluno;
    private javax.swing.JLabel lSelectLivro1;
    private com.toedter.calendar.JCalendar tCalendario;
    private javax.swing.JTextField tPesquisar;
    private javax.swing.JTextField tPesquisarLivro;
    // End of variables declaration//GEN-END:variables
}
